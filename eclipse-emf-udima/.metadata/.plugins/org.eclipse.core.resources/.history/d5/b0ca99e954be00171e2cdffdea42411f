/**
 */
package es.udima.cesarlaso.tfm.healthmonitors.provider;

import es.udima.cesarlaso.tfm.healthmonitors.util.HealthmonitorsAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class HealthmonitorsItemProviderAdapterFactory extends HealthmonitorsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public HealthmonitorsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.udima.cesarlaso.tfm.healthmonitors.Monitor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MonitorItemProvider monitorItemProvider;

	/**
	 * This creates an adapter for a {@link es.udima.cesarlaso.tfm.healthmonitors.Monitor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMonitorAdapter() {
		if (monitorItemProvider == null) {
			monitorItemProvider = new MonitorItemProvider(this);
		}

		return monitorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.udima.cesarlaso.tfm.healthmonitors.CPULoad} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CPULoadItemProvider cpuLoadItemProvider;

	/**
	 * This creates an adapter for a {@link es.udima.cesarlaso.tfm.healthmonitors.CPULoad}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCPULoadAdapter() {
		if (cpuLoadItemProvider == null) {
			cpuLoadItemProvider = new CPULoadItemProvider(this);
		}

		return cpuLoadItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.udima.cesarlaso.tfm.healthmonitors.RAMLoad} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RAMLoadItemProvider ramLoadItemProvider;

	/**
	 * This creates an adapter for a {@link es.udima.cesarlaso.tfm.healthmonitors.RAMLoad}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRAMLoadAdapter() {
		if (ramLoadItemProvider == null) {
			ramLoadItemProvider = new RAMLoadItemProvider(this);
		}

		return ramLoadItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.udima.cesarlaso.tfm.healthmonitors.CPUTemperature} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CPUTemperatureItemProvider cpuTemperatureItemProvider;

	/**
	 * This creates an adapter for a {@link es.udima.cesarlaso.tfm.healthmonitors.CPUTemperature}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCPUTemperatureAdapter() {
		if (cpuTemperatureItemProvider == null) {
			cpuTemperatureItemProvider = new CPUTemperatureItemProvider(this);
		}

		return cpuTemperatureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.udima.cesarlaso.tfm.healthmonitors.GPUTemperature} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GPUTemperatureItemProvider gpuTemperatureItemProvider;

	/**
	 * This creates an adapter for a {@link es.udima.cesarlaso.tfm.healthmonitors.GPUTemperature}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGPUTemperatureAdapter() {
		if (gpuTemperatureItemProvider == null) {
			gpuTemperatureItemProvider = new GPUTemperatureItemProvider(this);
		}

		return gpuTemperatureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.udima.cesarlaso.tfm.healthmonitors.HDIO} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HDIOItemProvider hdioItemProvider;

	/**
	 * This creates an adapter for a {@link es.udima.cesarlaso.tfm.healthmonitors.HDIO}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHDIOAdapter() {
		if (hdioItemProvider == null) {
			hdioItemProvider = new HDIOItemProvider(this);
		}

		return hdioItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.udima.cesarlaso.tfm.healthmonitors.NetworkIO} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NetworkIOItemProvider networkIOItemProvider;

	/**
	 * This creates an adapter for a {@link es.udima.cesarlaso.tfm.healthmonitors.NetworkIO}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNetworkIOAdapter() {
		if (networkIOItemProvider == null) {
			networkIOItemProvider = new NetworkIOItemProvider(this);
		}

		return networkIOItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.udima.cesarlaso.tfm.healthmonitors.HDPartition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HDPartitionItemProvider hdPartitionItemProvider;

	/**
	 * This creates an adapter for a {@link es.udima.cesarlaso.tfm.healthmonitors.HDPartition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHDPartitionAdapter() {
		if (hdPartitionItemProvider == null) {
			hdPartitionItemProvider = new HDPartitionItemProvider(this);
		}

		return hdPartitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.udima.cesarlaso.tfm.healthmonitors.HDStats} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HDStatsItemProvider hdStatsItemProvider;

	/**
	 * This creates an adapter for a {@link es.udima.cesarlaso.tfm.healthmonitors.HDStats}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHDStatsAdapter() {
		if (hdStatsItemProvider == null) {
			hdStatsItemProvider = new HDStatsItemProvider(this);
		}

		return hdStatsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link es.udima.cesarlaso.tfm.healthmonitors.NetworkStats} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NetworkStatsItemProvider networkStatsItemProvider;

	/**
	 * This creates an adapter for a {@link es.udima.cesarlaso.tfm.healthmonitors.NetworkStats}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNetworkStatsAdapter() {
		if (networkStatsItemProvider == null) {
			networkStatsItemProvider = new NetworkStatsItemProvider(this);
		}

		return networkStatsItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (monitorItemProvider != null) monitorItemProvider.dispose();
		if (cpuLoadItemProvider != null) cpuLoadItemProvider.dispose();
		if (ramLoadItemProvider != null) ramLoadItemProvider.dispose();
		if (cpuTemperatureItemProvider != null) cpuTemperatureItemProvider.dispose();
		if (gpuTemperatureItemProvider != null) gpuTemperatureItemProvider.dispose();
		if (hdioItemProvider != null) hdioItemProvider.dispose();
		if (networkIOItemProvider != null) networkIOItemProvider.dispose();
		if (hdPartitionItemProvider != null) hdPartitionItemProvider.dispose();
		if (hdStatsItemProvider != null) hdStatsItemProvider.dispose();
		if (networkStatsItemProvider != null) networkStatsItemProvider.dispose();
	}

}
